{"/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance_dlv_wrapper.ts":{"path":"/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance_dlv_wrapper.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":30}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":17}},"3":{"start":{"line":5,"column":22},"end":{"line":5,"column":98}},"4":{"start":{"line":6,"column":20},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":9},"end":{"line":7,"column":22}},"6":{"start":{"line":8,"column":12},"end":{"line":8,"column":28}},"7":{"start":{"line":10,"column":19},"end":{"line":10,"column":49}},"8":{"start":{"line":11,"column":0},"end":{"line":42,"column":3}},"9":{"start":{"line":13,"column":4},"end":{"line":26,"column":7}},"10":{"start":{"line":14,"column":34},"end":{"line":14,"column":67}},"11":{"start":{"line":15,"column":8},"end":{"line":15,"column":79}},"12":{"start":{"line":16,"column":27},"end":{"line":16,"column":53}},"13":{"start":{"line":18,"column":19},"end":{"line":21,"column":9}},"14":{"start":{"line":22,"column":18},"end":{"line":22,"column":42}},"15":{"start":{"line":23,"column":8},"end":{"line":23,"column":108}},"16":{"start":{"line":24,"column":8},"end":{"line":24,"column":38}},"17":{"start":{"line":25,"column":8},"end":{"line":25,"column":31}},"18":{"start":{"line":27,"column":4},"end":{"line":41,"column":7}},"19":{"start":{"line":28,"column":34},"end":{"line":28,"column":67}},"20":{"start":{"line":29,"column":8},"end":{"line":29,"column":79}},"21":{"start":{"line":30,"column":24},"end":{"line":30,"column":51}},"22":{"start":{"line":32,"column":19},"end":{"line":36,"column":9}},"23":{"start":{"line":37,"column":8},"end":{"line":37,"column":33}},"24":{"start":{"line":38,"column":8},"end":{"line":38,"column":60}},"25":{"start":{"line":39,"column":23},"end":{"line":39,"column":120}},"26":{"start":{"line":40,"column":8},"end":{"line":40,"column":48}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":28},"end":{"line":11,"column":29}},"loc":{"start":{"line":11,"column":34},"end":{"line":42,"column":1}},"line":11},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":54},"end":{"line":13,"column":55}},"loc":{"start":{"line":13,"column":60},"end":{"line":26,"column":5}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":27,"column":60},"end":{"line":27,"column":61}},"loc":{"start":{"line":27,"column":66},"end":{"line":41,"column":5}},"line":27}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1},"f":{"0":1,"1":1,"2":1},"b":{},"inputSourceMap":{"version":3,"file":"/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance_dlv_wrapper.ts","sources":["/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance_dlv_wrapper.ts"],"names":[],"mappings":";;AAAA,+BAAsC;AACtC,iBAAe;AACf,mGAA8F;AAC9F,IAAI,aAAa,GAAG,OAAO,CAAC,eAAe,CAAC,CAAA;AAC5C,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AACtB,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAA;AAE5B,qBAAqB;AACrB,MAAM,UAAU,GAAG,IAAI,wBAAU,EAAE,CAAA;AAEnC,QAAQ,CAAC,iBAAiB,EAAG,GAAG,EAAE;IAC9B,qBAAqB;IACrB,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;QACnD,IAAI,mBAAmB,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAC5D,mBAAmB,CAAC,OAAO,CAAC,yCAAyC,CAAC,CAAA;QAEtE,IAAI,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAE9C,kEAAkE;QAClE,IAAI,IAAI,GAAG;YACP,QAAQ,EAAE,UAAU;YACpB,QAAQ,EAAE,cAAc;SAC3B,CAAA;QAED,IAAI,GAAG,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACnC,IAAA,aAAM,EAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,CAAE,MAAM,EAAE,QAAQ,CAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;QAC1F,mBAAmB,CAAC,OAAO,EAAE,CAAA;QAC7B,YAAY,CAAC,OAAO,EAAE,CAAA;IAE1B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QACzD,IAAI,mBAAmB,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAC5D,mBAAmB,CAAC,OAAO,CAAC,yCAAyC,CAAC,CAAA;QAEtE,IAAI,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;QAE5C,kEAAkE;QAClE,IAAI,IAAI,GAAG;YACP,QAAQ,EAAE,UAAU;YACpB,QAAQ,EAAE,cAAc;YACxB,MAAM,EAAE,aAAa;SACxB,CAAA;QAED,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACzB,IAAA,aAAM,EAAC,SAAS,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAA;QACvC,IAAI,QAAQ,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,CAAE,MAAM,EAAE,QAAQ,CAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAA;QAClH,IAAA,aAAM,EAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAA;IAC/B,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAA","sourcesContent":["import { assert, expect } from 'chai';\nimport 'mocha';\nimport { DLVWrapper } from '@agile-visualizer-team/visualizer-asp/src/wrapper-dlv/dlv_wrapper'\nvar child_process = require('child_process')\nvar fs = require('fs')\nvar sinon = require('sinon')\n\n//GIVEN a dlv wrapper\nconst dlvWrapper = new DLVWrapper()\n\ndescribe('acceptance test',  () => {\n    //Parametrizing tests\n    it('returns the correct representation of an AS', () => {\n        let dlv_executable_stub = sinon.stub(dlvWrapper, \"run_dlv\");\n        dlv_executable_stub.returns(\"DLV X.X.X\\n\\n{m(2), s(2,3)}\\nCOST 1@1\\n\")\n\n        let console_stub = sinon.stub(console, 'log');\n\n        //WHEN the user execute the program using the following parameters\n        let argv = {\n            dlv_path: 'dlv_path',\n            asp_file: 'asp_file.asp',\n        }\n\n        let res = dlvWrapper.execute(argv);\n        expect(res).to.be.equals(JSON.stringify([{ 'as': [ 'm(2)', 's(2,3)' ], 'cost': '1@1' }]));\n        dlv_executable_stub.restore()\n        console_stub.restore()\n        \n    });\n\n    it('write to file the correct representation of an AS', () => {\n        let dlv_executable_stub = sinon.stub(dlvWrapper, \"run_dlv\");\n        dlv_executable_stub.returns(\"DLV X.X.X\\n\\n{m(2), s(2,3)}\\nCOST 1@1\\n\")\n\n        let file_stub = sinon.stub(fs, 'writeFile');\n\n        //WHEN the user execute the program using the following parameters\n        let argv = {\n            dlv_path: 'dlv_path',\n            asp_file: 'asp_file.asp',\n            output: 'output.json'\n        }\n\n        dlvWrapper.execute(argv);\n        expect(file_stub.calledOnce).to.be.true\n        let test_res = file_stub.getCall(0).args.includes(JSON.stringify([{ 'as': [ 'm(2)', 's(2,3)' ], 'cost': '1@1' }]))\n        expect(test_res).to.be.true\n    });\n\n})"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6ee32312712efb6afff4f1240a5e03cd1cddddfc","contentHash":"29aaef05c4364434a78636cd02505edcad249782292a0ebc609cb90346682cca"},"/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance_visualization_graph.ts":{"path":"/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance_visualization_graph.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":28},"end":{"line":3,"column":119}},"2":{"start":{"line":4,"column":15},"end":{"line":4,"column":30}},"3":{"start":{"line":5,"column":17},"end":{"line":5,"column":97}},"4":{"start":{"line":6,"column":22},"end":{"line":6,"column":107}},"5":{"start":{"line":7,"column":0},"end":{"line":227,"column":3}},"6":{"start":{"line":8,"column":4},"end":{"line":71,"column":7}},"7":{"start":{"line":10,"column":29},"end":{"line":66,"column":9}},"8":{"start":{"line":68,"column":20},"end":{"line":68,"column":81}},"9":{"start":{"line":70,"column":8},"end":{"line":70,"column":43}},"10":{"start":{"line":72,"column":4},"end":{"line":98,"column":7}},"11":{"start":{"line":74,"column":35},"end":{"line":92,"column":9}},"12":{"start":{"line":94,"column":8},"end":{"line":94,"column":76}},"13":{"start":{"line":96,"column":8},"end":{"line":96,"column":77}},"14":{"start":{"line":97,"column":8},"end":{"line":97,"column":93}},"15":{"start":{"line":99,"column":4},"end":{"line":156,"column":7}},"16":{"start":{"line":101,"column":39},"end":{"line":152,"column":9}},"17":{"start":{"line":155,"column":8},"end":{"line":155,"column":111}},"18":{"start":{"line":157,"column":4},"end":{"line":226,"column":7}},"19":{"start":{"line":159,"column":43},"end":{"line":222,"column":9}},"20":{"start":{"line":225,"column":8},"end":{"line":225,"column":115}},"21":{"start":{"line":228,"column":0},"end":{"line":405,"column":3}},"22":{"start":{"line":229,"column":26},"end":{"line":264,"column":5}},"23":{"start":{"line":265,"column":20},"end":{"line":296,"column":5}},"24":{"start":{"line":297,"column":4},"end":{"line":305,"column":7}},"25":{"start":{"line":299,"column":23},"end":{"line":299,"column":71}},"26":{"start":{"line":301,"column":20},"end":{"line":301,"column":34}},"27":{"start":{"line":303,"column":8},"end":{"line":303,"column":67}},"28":{"start":{"line":304,"column":8},"end":{"line":304,"column":72}},"29":{"start":{"line":306,"column":4},"end":{"line":326,"column":7}},"30":{"start":{"line":308,"column":24},"end":{"line":308,"column":72}},"31":{"start":{"line":309,"column":24},"end":{"line":309,"column":72}},"32":{"start":{"line":311,"column":21},"end":{"line":311,"column":36}},"33":{"start":{"line":312,"column":21},"end":{"line":312,"column":36}},"34":{"start":{"line":314,"column":8},"end":{"line":314,"column":62}},"35":{"start":{"line":315,"column":8},"end":{"line":325,"column":9}},"36":{"start":{"line":315,"column":21},"end":{"line":315,"column":22}},"37":{"start":{"line":316,"column":12},"end":{"line":318,"column":13}},"38":{"start":{"line":316,"column":25},"end":{"line":316,"column":26}},"39":{"start":{"line":317,"column":16},"end":{"line":317,"column":92}},"40":{"start":{"line":320,"column":12},"end":{"line":324,"column":13}},"41":{"start":{"line":320,"column":25},"end":{"line":320,"column":26}},"42":{"start":{"line":321,"column":16},"end":{"line":321,"column":90}},"43":{"start":{"line":322,"column":16},"end":{"line":322,"column":86}},"44":{"start":{"line":323,"column":16},"end":{"line":323,"column":94}},"45":{"start":{"line":327,"column":4},"end":{"line":404,"column":7}},"46":{"start":{"line":328,"column":24},"end":{"line":352,"column":9}},"47":{"start":{"line":353,"column":24},"end":{"line":377,"column":9}},"48":{"start":{"line":378,"column":19},"end":{"line":389,"column":9}},"49":{"start":{"line":391,"column":25},"end":{"line":391,"column":62}},"50":{"start":{"line":392,"column":27},"end":{"line":392,"column":64}},"51":{"start":{"line":394,"column":22},"end":{"line":394,"column":38}},"52":{"start":{"line":395,"column":24},"end":{"line":395,"column":42}},"53":{"start":{"line":397,"column":8},"end":{"line":403,"column":9}},"54":{"start":{"line":397,"column":21},"end":{"line":397,"column":22}},"55":{"start":{"line":398,"column":12},"end":{"line":402,"column":13}},"56":{"start":{"line":398,"column":25},"end":{"line":398,"column":26}},"57":{"start":{"line":399,"column":16},"end":{"line":399,"column":92}},"58":{"start":{"line":400,"column":16},"end":{"line":400,"column":92}},"59":{"start":{"line":401,"column":16},"end":{"line":401,"column":98}},"60":{"start":{"line":406,"column":0},"end":{"line":503,"column":3}},"61":{"start":{"line":407,"column":4},"end":{"line":418,"column":7}},"62":{"start":{"line":409,"column":27},"end":{"line":411,"column":9}},"63":{"start":{"line":412,"column":26},"end":{"line":414,"column":9}},"64":{"start":{"line":417,"column":8},"end":{"line":417,"column":117}},"65":{"start":{"line":419,"column":4},"end":{"line":430,"column":7}},"66":{"start":{"line":421,"column":27},"end":{"line":423,"column":9}},"67":{"start":{"line":424,"column":26},"end":{"line":426,"column":9}},"68":{"start":{"line":429,"column":8},"end":{"line":429,"column":117}},"69":{"start":{"line":431,"column":4},"end":{"line":442,"column":7}},"70":{"start":{"line":433,"column":27},"end":{"line":435,"column":9}},"71":{"start":{"line":436,"column":26},"end":{"line":438,"column":9}},"72":{"start":{"line":441,"column":8},"end":{"line":441,"column":120}},"73":{"start":{"line":443,"column":4},"end":{"line":454,"column":7}},"74":{"start":{"line":445,"column":27},"end":{"line":447,"column":9}},"75":{"start":{"line":448,"column":26},"end":{"line":450,"column":9}},"76":{"start":{"line":453,"column":8},"end":{"line":453,"column":117}},"77":{"start":{"line":455,"column":4},"end":{"line":466,"column":7}},"78":{"start":{"line":457,"column":27},"end":{"line":459,"column":9}},"79":{"start":{"line":460,"column":26},"end":{"line":462,"column":9}},"80":{"start":{"line":465,"column":8},"end":{"line":465,"column":117}},"81":{"start":{"line":467,"column":4},"end":{"line":478,"column":7}},"82":{"start":{"line":469,"column":27},"end":{"line":471,"column":9}},"83":{"start":{"line":472,"column":26},"end":{"line":474,"column":9}},"84":{"start":{"line":477,"column":8},"end":{"line":477,"column":117}},"85":{"start":{"line":479,"column":4},"end":{"line":490,"column":7}},"86":{"start":{"line":481,"column":27},"end":{"line":483,"column":9}},"87":{"start":{"line":484,"column":26},"end":{"line":486,"column":9}},"88":{"start":{"line":489,"column":8},"end":{"line":489,"column":120}},"89":{"start":{"line":491,"column":4},"end":{"line":502,"column":7}},"90":{"start":{"line":493,"column":27},"end":{"line":495,"column":9}},"91":{"start":{"line":496,"column":26},"end":{"line":498,"column":9}},"92":{"start":{"line":501,"column":8},"end":{"line":501,"column":120}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":47},"end":{"line":7,"column":48}},"loc":{"start":{"line":7,"column":53},"end":{"line":227,"column":1}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":60},"end":{"line":8,"column":61}},"loc":{"start":{"line":8,"column":66},"end":{"line":71,"column":5}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":72,"column":83},"end":{"line":72,"column":84}},"loc":{"start":{"line":72,"column":89},"end":{"line":98,"column":5}},"line":72},"3":{"name":"(anonymous_3)","decl":{"start":{"line":99,"column":69},"end":{"line":99,"column":70}},"loc":{"start":{"line":99,"column":75},"end":{"line":156,"column":5}},"line":99},"4":{"name":"(anonymous_4)","decl":{"start":{"line":157,"column":73},"end":{"line":157,"column":74}},"loc":{"start":{"line":157,"column":79},"end":{"line":226,"column":5}},"line":157},"5":{"name":"(anonymous_5)","decl":{"start":{"line":228,"column":36},"end":{"line":228,"column":37}},"loc":{"start":{"line":228,"column":42},"end":{"line":405,"column":1}},"line":228},"6":{"name":"(anonymous_6)","decl":{"start":{"line":297,"column":58},"end":{"line":297,"column":59}},"loc":{"start":{"line":297,"column":64},"end":{"line":305,"column":5}},"line":297},"7":{"name":"(anonymous_7)","decl":{"start":{"line":306,"column":70},"end":{"line":306,"column":71}},"loc":{"start":{"line":306,"column":76},"end":{"line":326,"column":5}},"line":306},"8":{"name":"(anonymous_8)","decl":{"start":{"line":327,"column":89},"end":{"line":327,"column":90}},"loc":{"start":{"line":327,"column":95},"end":{"line":404,"column":5}},"line":327},"9":{"name":"(anonymous_9)","decl":{"start":{"line":406,"column":41},"end":{"line":406,"column":42}},"loc":{"start":{"line":406,"column":47},"end":{"line":503,"column":1}},"line":406},"10":{"name":"(anonymous_10)","decl":{"start":{"line":407,"column":98},"end":{"line":407,"column":99}},"loc":{"start":{"line":407,"column":104},"end":{"line":418,"column":5}},"line":407},"11":{"name":"(anonymous_11)","decl":{"start":{"line":419,"column":105},"end":{"line":419,"column":106}},"loc":{"start":{"line":419,"column":111},"end":{"line":430,"column":5}},"line":419},"12":{"name":"(anonymous_12)","decl":{"start":{"line":431,"column":93},"end":{"line":431,"column":94}},"loc":{"start":{"line":431,"column":99},"end":{"line":442,"column":5}},"line":431},"13":{"name":"(anonymous_13)","decl":{"start":{"line":443,"column":108},"end":{"line":443,"column":109}},"loc":{"start":{"line":443,"column":114},"end":{"line":454,"column":5}},"line":443},"14":{"name":"(anonymous_14)","decl":{"start":{"line":455,"column":91},"end":{"line":455,"column":92}},"loc":{"start":{"line":455,"column":97},"end":{"line":466,"column":5}},"line":455},"15":{"name":"(anonymous_15)","decl":{"start":{"line":467,"column":103},"end":{"line":467,"column":104}},"loc":{"start":{"line":467,"column":109},"end":{"line":478,"column":5}},"line":467},"16":{"name":"(anonymous_16)","decl":{"start":{"line":479,"column":93},"end":{"line":479,"column":94}},"loc":{"start":{"line":479,"column":99},"end":{"line":490,"column":5}},"line":479},"17":{"name":"(anonymous_17)","decl":{"start":{"line":491,"column":105},"end":{"line":491,"column":106}},"loc":{"start":{"line":491,"column":111},"end":{"line":502,"column":5}},"line":491}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":2,"38":2,"39":10,"40":2,"41":2,"42":10,"43":10,"44":10,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":3,"58":3,"59":3,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1},"b":{},"inputSourceMap":{"version":3,"file":"/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance_visualization_graph.ts","sources":["/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance_visualization_graph.ts"],"names":[],"mappings":"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","sourcesContent":["import { validateTemplateSchema } from \"@agile-visualizer-team/visualizer-asp/src/visualizer-graph/src/schema-validators\";\nimport { expect } from \"chai\";\nimport { GraphParser } from \"@agile-visualizer-team/visualizer-asp/src/visualizer-graph/src/parser\";\nimport { Expression, ExpressionEvaluator } from \"@agile-visualizer-team/visualizer-asp/src/visualizer-graph/src/expressions\";\nimport { GraphVariables } from \"@agile-visualizer-team/visualizer-asp/src/visualizer-graph/src/models\";\n\n\ndescribe(\"SCHEMA VALIDATORS ACCEPTANCE TESTS\", () => {\n\n    it(\"should evaluate properly a well formatted schema \", ()=> {\n        //GIVEN A well formatted template\n        const RIGHT_SCHEMA = {\n            \"template\": \"graph\",\n            \"layout\": \"dagre\",\n            \"nodes\": [\n                {\n                    \"atom\": {\n                        \"name\": \"inNode\",\n                        \"variables\": [\"label\"]\n                    },\n                    \"style\": {\n                        \"color\": {\n                            \"all\": \"green\"\n                        }\n                    }\n                },\n                {\n                    \"atom\": {\n                        \"name\": \"outNode\",\n                        \"variables\": [\"label\"]\n                    },\n                    \"style\": {\n                        \"color\": {\n                            \"all\": \"grey\"\n                        }\n                    }\n                }\n            ],\n            \"edges\": [\n                {\n                    \"atom\": {\n                        \"name\": \"inEdge\",\n                        \"variables\": [\"from\", \"to\", \"weight\"]\n                    },\n                    \"style\": {\n                        \"color\": {\n                            \"if\": [\n                                {\"variable\": \"weight\", \"gte\": 6, \"then\": \"red\"},\n                                {\"variable\": \"weight\", \"gte\": 4, \"then\": \"orange\"},\n                                {\"variable\": \"weight\", \"gte\": 2, \"then\": \"yellow\"}\n                            ],\n                            \"else\": \"green\"\n                        },\n                        \"oriented\": true\n                    }\n                },\n                {\n                    \"atom\": {\n                        \"name\": \"outEdge\",\n                        \"variables\": [\"from\", \"to\", \"weight\"]\n                    },\n                    \"style\": {\n                        \"color\": \"grey\",\n                        \"oriented\": false\n                    }\n                }\n            ]\n        };\n        //WHEN I try to validate the template\n        const res = validateTemplateSchema(RIGHT_SCHEMA);\n        //THEN The template should be considered valid\n        expect(res).to.be.true;\n    });\n    it(\"should evaluate properly the schema using defaults value if not provided\", ()=> {\n        //GIVEN A template with some missing parameters\n        const MISSING_VAR_SCHEMA = {\n            template: \"graph\",\n            nodes: [{\n                atom: {\n                },\n                style:{\n                    color:{\n                    }\n                }\n            }],\n            edges: [{\n                atom: {\n                    name: \"edge\",\n                    variables: [\"from\",\"to\",\"weight\",\"color\"]\n                },\n                style:{\n                    color: \"green\",\n                    oriented: true\n                }\n            }]\n        };\n        //WHEN I try to validate the template\n        validateTemplateSchema(MISSING_VAR_SCHEMA);\n        //THEN I expect that the missing parameters has been filled with the right values\n        expect((<any>MISSING_VAR_SCHEMA).nodes[0].atom.name).eq(\"node\");\n        expect((<any>MISSING_VAR_SCHEMA).nodes[0].atom.variables).deep.equal(['label']);\n    });\n    it(\"should accept a template with 'color' parameters as string\", ()=>{\n        //GIVEN A template with 'color' parameters as string\n        const COLOR_AS_STRING_SCHEMA = {\n            \"template\": \"graph\",\n            \"layout\": \"dagre\",\n            \"nodes\": [\n                {\n                    \"atom\": {\n                        \"name\": \"inNode\",\n                        \"variables\": [\"label\"]\n                    },\n                    \"style\": {\n                        \"color\": {\n                            \"root\": \"green\",\n                            \"nonRoot\": \"blue\",\n                            \"leaf\": \"fuchsia\"\n                        }\n                    }\n                },\n                {\n                    \"atom\": {\n                        \"name\": \"outNode\",\n                        \"variables\": [\"label\"]\n                    },\n                    \"style\": {\n                        \"color\": {\n                            \"all\": \"grey\"\n                        }\n                    }\n                }\n            ],\n            \"edges\": [\n                {\n                    \"atom\": {\n                        \"name\": \"inEdge\",\n                        \"variables\": [\"from\", \"to\", \"weight\"]\n                    },\n                    \"style\": {\n                        \"color\": \"blue\",\n                        \"oriented\": true\n                    }\n                },\n                {\n                    \"atom\": {\n                        \"name\": \"outEdge\",\n                        \"variables\": [\"from\", \"to\", \"weight\"]\n                    },\n                    \"style\": {\n                        \"color\": \"grey\",\n                        \"oriented\": false\n                    }\n                }\n            ]\n        };\n        //WHEN I try to validate the template\n        //THEN The template should be considered valid\n        expect(validateTemplateSchema(COLOR_AS_STRING_SCHEMA)).to.be.true;\n    });\n    it(\"should accept a template with 'color' parameters as expression\", ()=>{\n        //GIVEN A template with 'color' parameters as expression\n        const COLOR_AS_EXPRESSION_SCHEMA = {\n            \"template\": \"graph\",\n            \"layout\": \"dagre\",\n            \"nodes\": [\n                {\n                    \"atom\": {\n                        \"name\": \"inNode\",\n                        \"variables\": [\"label\"]\n                    },\n                    \"style\": {\n                        \"color\": {\n                            \"all\": {\n                                \"if\": [\n                                    {\"variable\": \"label\", \"matches\": \"a\", \"then\": \"green\"},\n                                    {\"variable\": \"label\", \"matches\": \"d\", \"then\": \"blue\"},\n                                    {\"variable\": \"label\", \"matches\": \"h\", \"then\": \"fuchsia\"}\n                                ],\n                                \"else\": \"orange\"\n                            }\n                        }\n                    }\n                },\n                {\n                    \"atom\": {\n                        \"name\": \"outNode\",\n                        \"variables\": [\"label\"]\n                    },\n                    \"style\": {\n                        \"color\": {\n                            \"all\": \"grey\"\n                        }\n                    }\n                }\n            ],\n            \"edges\": [\n                {\n                    \"atom\": {\n                        \"name\": \"inEdge\",\n                        \"variables\": [\"from\", \"to\", \"weight\"]\n                    },\n                    \"style\": {\n                        \"color\": {\n                            \"if\": [\n                                {\"variable\": \"weight\", \"gte\": 6, \"then\": \"red\"},\n                                {\"variable\": \"weight\", \"gte\": 4, \"then\": \"orange\"},\n                                {\"variable\": \"weight\", \"gte\": 2, \"then\": \"yellow\"}\n                            ],\n                            \"else\": \"green\"\n                        },\n                        \"oriented\": true\n                    }\n                },\n                {\n                    \"atom\": {\n                        \"name\": \"outEdge\",\n                        \"variables\": [\"from\", \"to\", \"weight\"]\n                    },\n                    \"style\": {\n                        \"color\": \"grey\",\n                        \"oriented\": false\n                    }\n                }\n            ]\n        };\n        //WHEN I try to validate the template\n        //THEN The template should be considered valid\n        expect(validateTemplateSchema(COLOR_AS_EXPRESSION_SCHEMA)).to.be.true;\n    });\n});\n\ndescribe(\"PARSER ACCEPTANCE TESTS\", ()=>{\n    const GOOD_TEMPLATE = {\n    \"template\": \"graph\",\n    \"nodes\": [\n        {\n            \"atom\": {\n                \"name\": \"node\",\n                \"variables\": [\"label\"]\n            },\n            \"style\": {\n                \"color\": {\n                    \"root\": \"yellow\",\n                    \"leaf\": \"fuchsia\",\n                    \"nonRoot\": {\n                        \"if\": [\n                            {\"variable\": \"label\", \"matches\": \"a\", \"then\": \"green\"},\n                            {\"variable\": \"label\", \"matches\": \"g\", \"then\": \"fuchsia\"}\n                        ],\n                        \"else\": \"red\"\n                    }\n                }\n            }\n        }\n    ],\n    \"edges\": [\n        {\n            \"atom\": {\n                \"name\": \"edge\",\n                \"variables\": [\"from\", \"to\", \"weight\"]\n            },\n            \"style\": {\n                \"color\": \"green\",\n                \"oriented\": true\n            }\n        }\n    ]\n    };\n    const GOOD_AS = [\n        {\n            \"as\": [\n                \"node(a)\",\n                \"node(b)\",\n                \"node(c)\",\n                \"node(d)\",\n                \"node(e)\",\n                \"node(f)\",\n                \"node(g)\",\n                \"edge(a,b,10)\",\n                \"edge(a,c,5)\",\n                \"edge(b,d,6)\",\n                \"edge(b,e,7)\",\n                \"edge(b,f,5)\",\n                \"edge(c,d,4)\",\n                \"edge(d,g,3)\"\n            ],\n            \"cost\": \"1@2\"\n        },\n        {\n            \"as\": [\n                \"node(a)\",\n                \"node(b)\",\n                \"node(g)\",\n                \"edge(a,b,10)\",\n                \"edge(b,g,5)\",\n                \"edge(a,g,3)\"\n            ],\n            \"cost\": \"1@2\"\n        }\n    ];\n    it(\"should generate a correct graph from a template\", () =>{\n        //GIVEN A parser, an answer set template and a syntax template\n        const parser = new GraphParser(GOOD_TEMPLATE, GOOD_AS);\n        //WHEN I try to evaluate them\n        const res = parser.parse();\n        //THEN I expect to recive as first node 'a' with color 'yellow'\n        expect(res[0].nodes[0].label).to.be.equal(\"a\");\n        expect(res[0].nodes[0].color).to.be.equal(\"yellow\");\n    });\n    it(\"given the same input, it will always return the same output\", () => {\n        //GIVEN The same input to two different parser\n        const parser1 = new GraphParser(GOOD_TEMPLATE, GOOD_AS);\n        const parser2 = new GraphParser(GOOD_TEMPLATE, GOOD_AS);\n        //WHEN I try to evaluate them\n        const res1 = parser1.parse();\n        const res2 = parser2.parse();\n        //THEN The answers must be always the same\n        expect(res1.length).to.be.eq(res2.length);\n        for (let i = 0; i < res1.length; ++i) {\n            for (let j = 0; j < res1[i].nodes.length; ++j) {\n                expect(res1[i].nodes[j].label).to.be.eq(res2[i].nodes[j].label);\n            }\n            // noinspection DuplicatedCode\n            for (let j = 0; j < res1[i].edges.length; ++j) {\n                expect(res1[i].edges[j].from).to.be.eq(res2[i].edges[j].from);\n                expect(res1[i].edges[j].to).to.be.eq(res2[i].edges[j].to);\n                expect(res1[i].edges[j].weight).to.be.eq(res2[i].edges[j].weight);\n            }\n        }\n    });\n    it(\"should create, given two template with from-to switched, create a mirror graph\", () => {\n        const FROM_TO = {\n            \"template\": \"graph\",\n            \"nodes\": [{\n                \"atom\": {\n                    \"name\": \"node\",\n                    \"variables\": [\"label\"]\n                },\n                \"style\": {\n                    \"color\": {\n                        \"root\": \"yellow\",\n                        \"leaf\": \"fuchsia\",\n                        \"nonRoot\": \"blue\"\n                    }\n                }\n            }],\n            \"edges\": [{\n                \"atom\": {\n                    \"name\": \"edge\",\n                    \"variables\": [\"from\", \"to\", \"weight\"]\n                },\n                \"style\": {\n                    \"color\": \"green\"\n                }\n            }]\n        };\n        const TO_FROM = {\n            \"template\": \"graph\",\n            \"nodes\": [{\n                \"atom\": {\n                    \"name\": \"node\",\n                    \"variables\": [\"label\"]\n                },\n                \"style\": {\n                    \"color\": {\n                        \"root\": \"yellow\",\n                        \"leaf\": \"fuchsia\",\n                        \"nonRoot\": \"blue\"\n                    }\n                }\n            }],\n            \"edges\": [{\n                \"atom\": {\n                    \"name\": \"edge\",\n                    \"variables\": [\"to\", \"from\", \"weight\"]\n                },\n                \"style\": {\n                    \"color\": \"green\"\n                }\n            }]\n        };\n        const AS = [\n            {\n                \"as\": [\n                    \"node(a)\",\n                    \"node(b)\",\n                    \"node(g)\",\n                    \"edge(a,b,10)\",\n                    \"edge(b,g,5)\",\n                    \"edge(a,g,3)\"\n                ]\n            }];\n        //GIVEN A parser with a FROM_TO template and a parser with TO_FROM template\n        const parserTO = new GraphParser(TO_FROM, AS);\n        const parserFROM = new GraphParser(FROM_TO, AS);\n        //WHEN I try to evaluate them\n        const resTO = parserTO.parse();\n        const resFROM = parserFROM.parse();\n        //THEN I expect to have mirrored results\n        for (let i = 0; i < resTO.length; ++i) {\n            for (let j = 0; j < resTO[i].edges.length; ++j) {\n                expect(resTO[i].edges[j].from).to.be.eq(resFROM[i].edges[j].to);\n                expect(resTO[i].edges[j].to).to.be.eq(resFROM[i].edges[j].from);\n                expect(resTO[i].edges[j].weight).to.be.eq(resFROM[i].edges[j].weight);\n            }\n        }\n    });\n});\n\ndescribe(\"EXPRESSIONS ACCEPTANCE TESTS\", ()=>{\n    it(\"should check, given an input, if it MATCHES exactly with the variable in the expression\", () => {\n        //GIVEN A \"match\" expression and a variable\n        const expression: Expression = {\n            if: [{variable: 'a', matches: 'test', then: 'foo'}], else: 'output'\n        };\n        const variables: GraphVariables = {\n            a: 'test'\n        };\n        //WHEN I try to evaluate them\n        //THEN The expression should return 'foo'\n        expect(new ExpressionEvaluator(expression).evaluate(variables)).to.be.equal('foo');\n    });\n    it(\"should check, given an input, if it IMATCHES (insensitive) with the variable in the expression\", () => {\n        //GIVEN A \"imatch\" expression and a variable\n        const expression: Expression = {\n            if: [{variable: 'a', imatches: 'test', then: 'foo'}], else: 'output'\n        };\n        const variables: GraphVariables = {\n            a: 'TEST'\n        };\n        //WHEN I try to evaluate them\n        //THEN The expression should return 'foo'\n        expect(new ExpressionEvaluator(expression).evaluate(variables)).to.be.equal('foo');\n    });\n    it(\"should check, given an input, if it is CONTAINED in the variable in the expression\", () => {\n        //GIVEN A \"contain\" expression and a variable\n        const expression: Expression = {\n            if: [{variable: 'a', contains: 'example_of_contain', then: 'foo'}], else: 'output'\n        };\n        const variables: GraphVariables = {\n            a: 'try'\n        };\n        //WHEN I try to evaluate them\n        //THEN The expression should return 'output'\n        expect(new ExpressionEvaluator(expression).evaluate(variables)).to.be.equal('output');\n    });\n    it(\"should check, given an input, if it is ICONTAINED (insensitive) in the variable in the expression\", () => {\n        //GIVEN A \"icontain\" expression and a variable\n        const expression: Expression = {\n            if: [{variable: 'a', icontains: 'cool', then: 'foo'}], else: 'bar'\n        };\n        const variables: GraphVariables = {\n            a: 'MYCOOLGRAPH'\n        };\n        //WHEN I try to evaluate them\n        //THEN The expression should return 'foo'\n        expect(new ExpressionEvaluator(expression).evaluate(variables)).to.be.equal('foo');\n    });\n    it(\"should check, given an input, if it is LOWER THAN the variable in the expression\", () => {\n        //GIVEN A \"lt\" expression and a variable\n        const expression: Expression = {\n            if: [{variable: 'a', lt: 5, then: 'foo'}], else: 'output'\n        };\n        const variables: GraphVariables = {\n            a: 2\n        };\n        //WHEN I try to evaluate them\n        //THEN The expression should return 'foo'\n        expect(new ExpressionEvaluator(expression).evaluate(variables)).to.be.equal('foo');\n    });\n    it(\"should check, given an input, if it is LOWER THAN OR EQUAL to the variable in the expression\", () => {\n        //GIVEN A \"lte\" expression and a variable\n        const expression: Expression = {\n            if: [{variable: 'a', lte: 5, then: 'foo'}], else: 'output'\n        };\n        const variables: GraphVariables = {\n            a: 5\n        };\n        //WHEN I try to evaluate them\n        //THEN The expression should return 'foo'\n        expect(new ExpressionEvaluator(expression).evaluate(variables)).to.be.equal('foo');\n    });\n    it(\"should check, given an input, if it is GREATER THAN the variable in the expression\", () => {\n        //GIVEN A \"gt\" expression and a variable\n        const expression: Expression = {\n            if: [{variable: 'a', gt: 5, then: 'foo'}], else: 'output'\n        };\n        const variables: GraphVariables = {\n            a: 2\n        };\n        //WHEN I try to evaluate them\n        //THEN The expression should return 'output'\n        expect(new ExpressionEvaluator(expression).evaluate(variables)).to.be.equal('output');\n    });\n    it(\"should check, given an input, if it is GREATER THAN OR EQUAL to the variable in the expression\", () => {\n        //GIVEN A \"gte\" expression and a variable\n        const expression: Expression = {\n            if: [{variable: 'a', gte: 5, then: 'foo'}], else: 'output'\n        };\n        const variables: GraphVariables = {\n            a: 3\n        };\n        //WHEN I try to evaluate them\n        //THEN The expression should return 'output'\n        expect(new ExpressionEvaluator(expression).evaluate(variables)).to.be.equal('output');\n    });\n});\n\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f3edc27f9b8a9d4888099753d2e66970cb9d8738","contentHash":"47043a882c38b5fe413e13f555e3b32a6b68a009bc238dd0353950fbd3ee01c2"},"/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance_visualization_matrix.ts":{"path":"/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance_visualization_matrix.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":15},"end":{"line":6,"column":30}},"4":{"start":{"line":7,"column":16},"end":{"line":7,"column":49}},"5":{"start":{"line":8,"column":31},"end":{"line":8,"column":126}},"6":{"start":{"line":9,"column":20},"end":{"line":22,"column":3}},"7":{"start":{"line":23,"column":0},"end":{"line":98,"column":3}},"8":{"start":{"line":24,"column":4},"end":{"line":58,"column":7}},"9":{"start":{"line":25,"column":28},"end":{"line":42,"column":10}},"10":{"start":{"line":43,"column":29},"end":{"line":43,"column":71}},"11":{"start":{"line":44,"column":8},"end":{"line":48,"column":31}},"12":{"start":{"line":51,"column":8},"end":{"line":51,"column":65}},"13":{"start":{"line":52,"column":8},"end":{"line":52,"column":72}},"14":{"start":{"line":53,"column":8},"end":{"line":53,"column":79}},"15":{"start":{"line":54,"column":8},"end":{"line":54,"column":79}},"16":{"start":{"line":55,"column":42},"end":{"line":55,"column":104}},"17":{"start":{"line":56,"column":8},"end":{"line":56,"column":62}},"18":{"start":{"line":57,"column":8},"end":{"line":57,"column":1379}},"19":{"start":{"line":59,"column":4},"end":{"line":93,"column":7}},"20":{"start":{"line":60,"column":28},"end":{"line":77,"column":10}},"21":{"start":{"line":78,"column":29},"end":{"line":78,"column":71}},"22":{"start":{"line":79,"column":8},"end":{"line":83,"column":32}},"23":{"start":{"line":86,"column":8},"end":{"line":86,"column":65}},"24":{"start":{"line":87,"column":8},"end":{"line":87,"column":72}},"25":{"start":{"line":88,"column":8},"end":{"line":88,"column":79}},"26":{"start":{"line":89,"column":8},"end":{"line":89,"column":79}},"27":{"start":{"line":90,"column":42},"end":{"line":90,"column":104}},"28":{"start":{"line":91,"column":8},"end":{"line":91,"column":62}},"29":{"start":{"line":92,"column":8},"end":{"line":92,"column":1373}},"30":{"start":{"line":94,"column":4},"end":{"line":97,"column":7}},"31":{"start":{"line":96,"column":8},"end":{"line":96,"column":34}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":30},"end":{"line":23,"column":31}},"loc":{"start":{"line":23,"column":36},"end":{"line":98,"column":1}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":104},"end":{"line":24,"column":105}},"loc":{"start":{"line":24,"column":110},"end":{"line":58,"column":5}},"line":24},"3":{"name":"(anonymous_3)","decl":{"start":{"line":59,"column":104},"end":{"line":59,"column":105}},"loc":{"start":{"line":59,"column":110},"end":{"line":93,"column":5}},"line":59},"4":{"name":"(anonymous_4)","decl":{"start":{"line":94,"column":14},"end":{"line":94,"column":15}},"loc":{"start":{"line":94,"column":20},"end":{"line":97,"column":5}},"line":94}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":2},"f":{"0":1,"1":1,"2":1,"3":1,"4":2},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1]},"inputSourceMap":{"version":3,"file":"/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance_visualization_matrix.ts","sources":["/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance_visualization_matrix.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\nimport sinon from \"sinon\";\nimport { MatrixCreator } from \"@agile-visualizer-team/visualizer-asp/src/visualizer-matrix/src/matrix_visualization\";\n\nconst answer_sets:JSON = JSON.parse(`[\n    {\n        \"as\" : [  \"cell(0,1,peppe)\",  \"cell2(0,0,cell21) \", \"cell2(0,1,cell22)\" ],\n        \"cost\" : \"1@2\"\n    },\n    {\n        \"as\" : [ \"cell(0,0,ciao) \", \"cell(0,1,ciao)\", \"cell(0,2,ciao)\",  \"cell(1,0,ciao1) \", \"cell(1,1,ciao12)\", \"cell(1,2,ciao)\"  ],\n        \"cost\" : \"1@2\"\n    },\n    {\n        \"as\" : [ \"cell3(0,0,ciao) \", \"cell3(0,1,peppe)\",  \"cell3(0,0,cell21) \", \"cell3(0,1,cell22)\" ],\n        \"cost\" : \"1@2\"\n    }\n]`);\n\n\n\n\n\ndescribe('acceptance tests ', () => { // the tests container\n\n\n    it('as a user i want to create a matrix in light mode from an answer set and a configuration file', () => { // the single test\n        const config_file = JSON.parse(`{\n            \"cell\" : [\"cell\", \"cell2\"],\n            \"maxNumOfAnswerSetToConvert\" : 4,\n            \"table_field_mapping\": {\n                \"0\":\"row\",\n                \"1\": \"column\",\n        \n                \"2\":\"Value\"\n            },\n            \"style\": {\n                \"header_color\": \"#b41b22\",\n                \"header_font_size\": 20,\n                \"header_font_family\": \"Arial\",\n                \"header_font_weight\": \"bold\",\n                \"dark_mode\": false\n              }\n        }\n        `);\n        let matrix_creator: MatrixCreator = new MatrixCreator();\n        sinon.stub(matrix_creator, 'get_config_style').returns({  header_color: \"#b41b22\",\n        header_font_size: 20,\n        header_font_family: \"Arial\",\n        header_font_weight: \"bold\",\n        dark_mode: true });\n        //I need to reassign because when the object is created the method is alredy been called.\n        //So, in order to give the correct value, I need to assign again.\n        matrix_creator.style = matrix_creator.get_config_style();\n        matrix_creator.base_styling = matrix_creator.get_base_styling();  \n        \n        sinon.stub(matrix_creator, 'config_file').value(config_file);\n        sinon.stub(matrix_creator, 'answer_sets').value(answer_sets);\n        \n        let create_image_from_html_mock = sinon.stub(matrix_creator, 'create_image_from_html')\n        \n\n        matrix_creator.run_script(matrix_creator.answer_sets)\n        \n        \n        expect(create_image_from_html_mock.getCall(0).args[1].replace(/\\s/g, \"\")).to.eql('<html><head><style>html{background-color:#101010;color:#e1e1e1;font-family:Arial;}strong{color:#e1e1e1;font-size:20px;}body{background-color:#101010;color:#e1e1e1;margin:1em;display:flex;justify-content:space-evenly;align-items:center;gap:20px;padding:1em;flex-direction:column;margin:1em;padding-top:1em;height:-webkit-fill-available;height:auto;}td{padding:12px15px;}thead{background-color:#b41b22;color:#ffffff;width:100%;font-size:20;font-family:Arial;font-weight:bold;text-align:center;display:table-caption;}tbodytr{border-bottom:1pxsolid#e1e1e1;background-color:#252525;}table{border-collapse:collapse;margin:1em;width:100%;font-size:0.9em;font-family:sans-serif;min-width:400px;box-shadow:0px10px15px-5pxrgba(200,200,200,0.10);color:#e1e1e1;}.titolo{display:flex;justify-content:space-around;align-items:center;}</style></head><body><table><thead><trclass=\"titolo\"><th>Answerset</th><th>Mappedvalue:cell</th></tr></thead><tbody><tr><td></td><td>0</td><td>1</td></tr><tr><td>0</td><td>Notdefined</td><td>peppe</td></tr></tbody></table><table><thead><trclass=\"titolo\"><th>Answerset</th><th>Mappedvalue:cell2</th></tr></thead><tbody><tr><td></td><td>0</td><td>1</td></tr><tr><td>0</td><td>cell21</td><td>cell22</td></tr></tbody></table></body></html>'.replace(/\\s/g, \"\"))\n    \n    \n    });\n\n\n    it('as a user i want to create a matrix in light mode from an answer set and a configuration file', () => { // the single test\n        const config_file = JSON.parse(`{\n            \"cell\" : [\"cell\", \"cell2\"],\n            \"maxNumOfAnswerSetToConvert\" : 4,\n            \"table_field_mapping\": {\n                \"0\":\"row\",\n                \"1\": \"column\",\n        \n                \"2\":\"Value\"\n            },\n            \"style\": {\n                \"header_color\": \"#b41b22\",\n                \"header_font_size\": 20,\n                \"header_font_family\": \"Arial\",\n                \"header_font_weight\": \"bold\",\n                \"dark_mode\": false\n              }\n        }\n        `);\n        let matrix_creator: MatrixCreator = new MatrixCreator();\n        sinon.stub(matrix_creator, 'get_config_style').returns({  header_color: \"#b41b22\",\n        header_font_size: 20,\n        header_font_family: \"Arial\",\n        header_font_weight: \"bold\",\n        dark_mode: false });\n        //I need to reassign because when the object is created the method is alredy been called.\n        //So, in order to give the correct value, I need to assign again.\n        matrix_creator.style = matrix_creator.get_config_style();\n        matrix_creator.base_styling = matrix_creator.get_base_styling();  \n        \n        sinon.stub(matrix_creator, 'config_file').value(config_file);\n        sinon.stub(matrix_creator, 'answer_sets').value(answer_sets);\n        \n        let create_image_from_html_mock = sinon.stub(matrix_creator, 'create_image_from_html')\n        \n\n        matrix_creator.run_script(matrix_creator.answer_sets)\n        \n        \n        expect(create_image_from_html_mock.getCall(0).args[1].replace(/\\s/g, \"\")).to.eql('<html><head><style>html{background-color:#ebebeb;color:#000000;font-family:Arial;}strong{color:#000000;font-size:20px;}body{background-color:#ebebeb;color:#000000;margin:1em;display:flex;justify-content:space-evenly;align-items:center;gap:20px;padding:1em;flex-direction:column;margin:1em;padding-top:1em;height:-webkit-fill-available;height:auto;}td{padding:12px15px;}thead{background-color:#b41b22;color:#ffffff;width:100%;font-size:20;font-family:Arial;font-weight:bold;text-align:center;display:table-caption;}tbodytr{border-bottom:1pxsolid#878787;background-color:#f8f8f8;}table{border-collapse:collapse;margin:1em;width:100%;font-size:0.9em;font-family:sans-serif;min-width:400px;box-shadow:0px10px15px-5pxrgba(0,0,0,0.15);color:#000000;}.titolo{display:flex;justify-content:space-around;align-items:center;}</style></head><body><table><thead><trclass=\"titolo\"><th>Answerset</th><th>Mappedvalue:cell</th></tr></thead><tbody><tr><td></td><td>0</td><td>1</td></tr><tr><td>0</td><td>Notdefined</td><td>peppe</td></tr></tbody></table><table><thead><trclass=\"titolo\"><th>Answerset</th><th>Mappedvalue:cell2</th></tr></thead><tbody><tr><td></td><td>0</td><td>1</td></tr><tr><td>0</td><td>cell21</td><td>cell22</td></tr></tbody></table></body></html>'.replace(/\\s/g, \"\"))\n    \n    \n    });\n\n\n    afterEach(() => {\n        //Needed in order to restore the stub and the methods that have been mocked\n        sinon.restore();\n    });\n    \n});"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"39a946ec00dccee5a0731e1828c9ce6502e9b7d0","contentHash":"c17416f44ef7ac05a2d6ccf62b91c0c53cdcc84057935a15dd7120fa6c9d2215"}}