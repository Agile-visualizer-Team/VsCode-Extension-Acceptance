{"/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance.ts":{"path":"/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":15},"end":{"line":3,"column":30}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":17}},"3":{"start":{"line":5,"column":22},"end":{"line":5,"column":98}},"4":{"start":{"line":6,"column":20},"end":{"line":6,"column":44}},"5":{"start":{"line":7,"column":9},"end":{"line":7,"column":22}},"6":{"start":{"line":8,"column":12},"end":{"line":8,"column":28}},"7":{"start":{"line":10,"column":19},"end":{"line":10,"column":49}},"8":{"start":{"line":11,"column":0},"end":{"line":42,"column":3}},"9":{"start":{"line":13,"column":4},"end":{"line":26,"column":7}},"10":{"start":{"line":14,"column":34},"end":{"line":14,"column":67}},"11":{"start":{"line":15,"column":8},"end":{"line":15,"column":79}},"12":{"start":{"line":16,"column":27},"end":{"line":16,"column":53}},"13":{"start":{"line":18,"column":19},"end":{"line":21,"column":9}},"14":{"start":{"line":22,"column":8},"end":{"line":22,"column":33}},"15":{"start":{"line":23,"column":8},"end":{"line":23,"column":137}},"16":{"start":{"line":24,"column":8},"end":{"line":24,"column":38}},"17":{"start":{"line":25,"column":8},"end":{"line":25,"column":31}},"18":{"start":{"line":27,"column":4},"end":{"line":41,"column":7}},"19":{"start":{"line":28,"column":34},"end":{"line":28,"column":67}},"20":{"start":{"line":29,"column":8},"end":{"line":29,"column":79}},"21":{"start":{"line":30,"column":24},"end":{"line":30,"column":51}},"22":{"start":{"line":32,"column":19},"end":{"line":36,"column":9}},"23":{"start":{"line":37,"column":8},"end":{"line":37,"column":33}},"24":{"start":{"line":38,"column":8},"end":{"line":38,"column":60}},"25":{"start":{"line":39,"column":23},"end":{"line":39,"column":120}},"26":{"start":{"line":40,"column":8},"end":{"line":40,"column":48}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":28},"end":{"line":11,"column":29}},"loc":{"start":{"line":11,"column":34},"end":{"line":42,"column":1}},"line":11},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":62},"end":{"line":13,"column":63}},"loc":{"start":{"line":13,"column":68},"end":{"line":26,"column":5}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":27,"column":60},"end":{"line":27,"column":61}},"loc":{"start":{"line":27,"column":66},"end":{"line":41,"column":5}},"line":27}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1},"f":{"0":1,"1":1,"2":1},"b":{},"inputSourceMap":{"version":3,"file":"/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance.ts","sources":["/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance.ts"],"names":[],"mappings":";;AAAA,+BAAsC;AACtC,iBAAe;AACf,mGAA8F;AAC9F,IAAI,aAAa,GAAG,OAAO,CAAC,eAAe,CAAC,CAAA;AAC5C,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AACtB,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAA;AAE5B,qBAAqB;AACrB,MAAM,UAAU,GAAG,IAAI,wBAAU,EAAE,CAAA;AAEnC,QAAQ,CAAC,iBAAiB,EAAG,GAAG,EAAE;IAC9B,qBAAqB;IACrB,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC3D,IAAI,mBAAmB,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAC5D,mBAAmB,CAAC,OAAO,CAAC,yCAAyC,CAAC,CAAA;QAEtE,IAAI,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAE9C,kEAAkE;QAClE,IAAI,IAAI,GAAG;YACP,QAAQ,EAAE,UAAU;YACpB,QAAQ,EAAE,cAAc;SAC3B,CAAA;QAED,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACzB,IAAA,aAAM,EAAC,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,CAAE,MAAM,EAAE,QAAQ,CAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;QACvH,mBAAmB,CAAC,OAAO,EAAE,CAAA;QAC7B,YAAY,CAAC,OAAO,EAAE,CAAA;IAE1B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QACzD,IAAI,mBAAmB,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAC5D,mBAAmB,CAAC,OAAO,CAAC,yCAAyC,CAAC,CAAA;QAEtE,IAAI,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;QAE5C,kEAAkE;QAClE,IAAI,IAAI,GAAG;YACP,QAAQ,EAAE,UAAU;YACpB,QAAQ,EAAE,cAAc;YACxB,MAAM,EAAE,aAAa;SACxB,CAAA;QAED,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACzB,IAAA,aAAM,EAAC,SAAS,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAA;QACvC,IAAI,QAAQ,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,CAAE,MAAM,EAAE,QAAQ,CAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAA;QAClH,IAAA,aAAM,EAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAA;IAC/B,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAA","sourcesContent":["import { assert, expect } from 'chai';\nimport 'mocha';\nimport { DLVWrapper } from '@agile-visualizer-team/visualizer-asp/src/wrapper-dlv/dlv_wrapper'\nvar child_process = require('child_process')\nvar fs = require('fs')\nvar sinon = require('sinon')\n\n//GIVEN a dlv wrapper\nconst dlvWrapper = new DLVWrapper()\n\ndescribe('acceptance test',  () => {\n    //Parametrizing tests\n    it('write to stdout the correct representation of an AS', () => {\n        let dlv_executable_stub = sinon.stub(dlvWrapper, \"run_dlv\");\n        dlv_executable_stub.returns(\"DLV X.X.X\\n\\n{m(2), s(2,3)}\\nCOST 1@1\\n\")\n\n        let console_stub = sinon.stub(console, 'log');\n\n        //WHEN the user execute the program using the following parameters\n        let argv = {\n            dlv_path: 'dlv_path',\n            asp_file: 'asp_file.asp',\n        }\n\n        dlvWrapper.execute(argv);\n        expect(console_stub.calledOnceWithExactly(JSON.stringify([{ 'as': [ 'm(2)', 's(2,3)' ], 'cost': '1@1' }]))).to.be.true;\n        dlv_executable_stub.restore()\n        console_stub.restore()\n        \n    });\n\n    it('write to file the correct representation of an AS', () => {\n        let dlv_executable_stub = sinon.stub(dlvWrapper, \"run_dlv\");\n        dlv_executable_stub.returns(\"DLV X.X.X\\n\\n{m(2), s(2,3)}\\nCOST 1@1\\n\")\n\n        let file_stub = sinon.stub(fs, 'writeFile');\n\n        //WHEN the user execute the program using the following parameters\n        let argv = {\n            dlv_path: 'dlv_path',\n            asp_file: 'asp_file.asp',\n            output: 'output.json'\n        }\n\n        dlvWrapper.execute(argv);\n        expect(file_stub.calledOnce).to.be.true\n        let test_res = file_stub.getCall(0).args.includes(JSON.stringify([{ 'as': [ 'm(2)', 's(2,3)' ], 'cost': '1@1' }]))\n        expect(test_res).to.be.true\n    });\n\n})"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ed5e3a2edac7c1ea7e41835f7fad4c0139b4474b","contentHash":"9e2e7a2148edb0b19173c06c2d98088cdbd543ee626ea2690ef132d59175e998"}}