{"/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance_visualization_matrix.ts":{"path":"/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance_visualization_matrix.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":15},"end":{"line":6,"column":30}},"4":{"start":{"line":7,"column":16},"end":{"line":7,"column":49}},"5":{"start":{"line":8,"column":31},"end":{"line":8,"column":126}},"6":{"start":{"line":9,"column":20},"end":{"line":22,"column":3}},"7":{"start":{"line":23,"column":0},"end":{"line":98,"column":3}},"8":{"start":{"line":24,"column":4},"end":{"line":58,"column":7}},"9":{"start":{"line":25,"column":28},"end":{"line":42,"column":10}},"10":{"start":{"line":43,"column":29},"end":{"line":43,"column":71}},"11":{"start":{"line":44,"column":8},"end":{"line":48,"column":31}},"12":{"start":{"line":51,"column":8},"end":{"line":51,"column":65}},"13":{"start":{"line":52,"column":8},"end":{"line":52,"column":72}},"14":{"start":{"line":53,"column":8},"end":{"line":53,"column":79}},"15":{"start":{"line":54,"column":8},"end":{"line":54,"column":79}},"16":{"start":{"line":55,"column":42},"end":{"line":55,"column":104}},"17":{"start":{"line":56,"column":8},"end":{"line":56,"column":62}},"18":{"start":{"line":57,"column":8},"end":{"line":57,"column":1379}},"19":{"start":{"line":59,"column":4},"end":{"line":93,"column":7}},"20":{"start":{"line":60,"column":28},"end":{"line":77,"column":10}},"21":{"start":{"line":78,"column":29},"end":{"line":78,"column":71}},"22":{"start":{"line":79,"column":8},"end":{"line":83,"column":32}},"23":{"start":{"line":86,"column":8},"end":{"line":86,"column":65}},"24":{"start":{"line":87,"column":8},"end":{"line":87,"column":72}},"25":{"start":{"line":88,"column":8},"end":{"line":88,"column":79}},"26":{"start":{"line":89,"column":8},"end":{"line":89,"column":79}},"27":{"start":{"line":90,"column":42},"end":{"line":90,"column":104}},"28":{"start":{"line":91,"column":8},"end":{"line":91,"column":62}},"29":{"start":{"line":92,"column":8},"end":{"line":92,"column":1373}},"30":{"start":{"line":94,"column":4},"end":{"line":97,"column":7}},"31":{"start":{"line":96,"column":8},"end":{"line":96,"column":34}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":30},"end":{"line":23,"column":31}},"loc":{"start":{"line":23,"column":36},"end":{"line":98,"column":1}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":104},"end":{"line":24,"column":105}},"loc":{"start":{"line":24,"column":110},"end":{"line":58,"column":5}},"line":24},"3":{"name":"(anonymous_3)","decl":{"start":{"line":59,"column":104},"end":{"line":59,"column":105}},"loc":{"start":{"line":59,"column":110},"end":{"line":93,"column":5}},"line":59},"4":{"name":"(anonymous_4)","decl":{"start":{"line":94,"column":14},"end":{"line":94,"column":15}},"loc":{"start":{"line":94,"column":20},"end":{"line":97,"column":5}},"line":94}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},"f":{"0":1,"1":0,"2":0,"3":0,"4":0},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1]},"inputSourceMap":{"version":3,"file":"/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance_visualization_matrix.ts","sources":["/home/instafiore/CurrentFolder/ASD/projects/VsCode-Extension-Acceptance/src/acceptance_test/test_acceptance_visualization_matrix.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from \"chai\";\nimport sinon from \"sinon\";\nimport { MatrixCreator } from \"@agile-visualizer-team/visualizer-asp/src/visualizer-matrix/src/matrix_visualization\";\n\nconst answer_sets:JSON = JSON.parse(`[\n    {\n        \"as\" : [  \"cell(0,1,peppe)\",  \"cell2(0,0,cell21) \", \"cell2(0,1,cell22)\" ],\n        \"cost\" : \"1@2\"\n    },\n    {\n        \"as\" : [ \"cell(0,0,ciao) \", \"cell(0,1,ciao)\", \"cell(0,2,ciao)\",  \"cell(1,0,ciao1) \", \"cell(1,1,ciao12)\", \"cell(1,2,ciao)\"  ],\n        \"cost\" : \"1@2\"\n    },\n    {\n        \"as\" : [ \"cell3(0,0,ciao) \", \"cell3(0,1,peppe)\",  \"cell3(0,0,cell21) \", \"cell3(0,1,cell22)\" ],\n        \"cost\" : \"1@2\"\n    }\n]`);\n\n\n\n\n\ndescribe('acceptance tests ', () => { // the tests container\n\n\n    it('as a user i want to create a matrix in light mode from an answer set and a configuration file', () => { // the single test\n        const config_file = JSON.parse(`{\n            \"cell\" : [\"cell\", \"cell2\"],\n            \"maxNumOfAnswerSetToConvert\" : 4,\n            \"table_field_mapping\": {\n                \"0\":\"row\",\n                \"1\": \"column\",\n        \n                \"2\":\"Value\"\n            },\n            \"style\": {\n                \"header_color\": \"#b41b22\",\n                \"header_font_size\": 20,\n                \"header_font_family\": \"Arial\",\n                \"header_font_weight\": \"bold\",\n                \"dark_mode\": false\n              }\n        }\n        `);\n        let matrix_creator: MatrixCreator = new MatrixCreator();\n        sinon.stub(matrix_creator, 'get_config_style').returns({  header_color: \"#b41b22\",\n        header_font_size: 20,\n        header_font_family: \"Arial\",\n        header_font_weight: \"bold\",\n        dark_mode: true });\n        //I need to reassign because when the object is created the method is alredy been called.\n        //So, in order to give the correct value, I need to assign again.\n        matrix_creator.style = matrix_creator.get_config_style();\n        matrix_creator.base_styling = matrix_creator.get_base_styling();  \n        \n        sinon.stub(matrix_creator, 'config_file').value(config_file);\n        sinon.stub(matrix_creator, 'answer_sets').value(answer_sets);\n        \n        let create_image_from_html_mock = sinon.stub(matrix_creator, 'create_image_from_html')\n        \n\n        matrix_creator.run_script(matrix_creator.answer_sets)\n        \n        \n        expect(create_image_from_html_mock.getCall(0).args[1].replace(/\\s/g, \"\")).to.eql('<html><head><style>html{background-color:#101010;color:#e1e1e1;font-family:Arial;}strong{color:#e1e1e1;font-size:20px;}body{background-color:#101010;color:#e1e1e1;margin:1em;display:flex;justify-content:space-evenly;align-items:center;gap:20px;padding:1em;flex-direction:column;margin:1em;padding-top:1em;height:-webkit-fill-available;height:auto;}td{padding:12px15px;}thead{background-color:#b41b22;color:#ffffff;width:100%;font-size:20;font-family:Arial;font-weight:bold;text-align:center;display:table-caption;}tbodytr{border-bottom:1pxsolid#e1e1e1;background-color:#252525;}table{border-collapse:collapse;margin:1em;width:100%;font-size:0.9em;font-family:sans-serif;min-width:400px;box-shadow:0px10px15px-5pxrgba(200,200,200,0.10);color:#e1e1e1;}.titolo{display:flex;justify-content:space-around;align-items:center;}</style></head><body><table><thead><trclass=\"titolo\"><th>Answerset</th><th>Mappedvalue:cell</th></tr></thead><tbody><tr><td></td><td>0</td><td>1</td></tr><tr><td>0</td><td>Notdefined</td><td>peppe</td></tr></tbody></table><table><thead><trclass=\"titolo\"><th>Answerset</th><th>Mappedvalue:cell2</th></tr></thead><tbody><tr><td></td><td>0</td><td>1</td></tr><tr><td>0</td><td>cell21</td><td>cell22</td></tr></tbody></table></body></html>'.replace(/\\s/g, \"\"))\n    \n    \n    });\n\n\n    it('as a user i want to create a matrix in light mode from an answer set and a configuration file', () => { // the single test\n        const config_file = JSON.parse(`{\n            \"cell\" : [\"cell\", \"cell2\"],\n            \"maxNumOfAnswerSetToConvert\" : 4,\n            \"table_field_mapping\": {\n                \"0\":\"row\",\n                \"1\": \"column\",\n        \n                \"2\":\"Value\"\n            },\n            \"style\": {\n                \"header_color\": \"#b41b22\",\n                \"header_font_size\": 20,\n                \"header_font_family\": \"Arial\",\n                \"header_font_weight\": \"bold\",\n                \"dark_mode\": false\n              }\n        }\n        `);\n        let matrix_creator: MatrixCreator = new MatrixCreator();\n        sinon.stub(matrix_creator, 'get_config_style').returns({  header_color: \"#b41b22\",\n        header_font_size: 20,\n        header_font_family: \"Arial\",\n        header_font_weight: \"bold\",\n        dark_mode: false });\n        //I need to reassign because when the object is created the method is alredy been called.\n        //So, in order to give the correct value, I need to assign again.\n        matrix_creator.style = matrix_creator.get_config_style();\n        matrix_creator.base_styling = matrix_creator.get_base_styling();  \n        \n        sinon.stub(matrix_creator, 'config_file').value(config_file);\n        sinon.stub(matrix_creator, 'answer_sets').value(answer_sets);\n        \n        let create_image_from_html_mock = sinon.stub(matrix_creator, 'create_image_from_html')\n        \n\n        matrix_creator.run_script(matrix_creator.answer_sets)\n        \n        \n        expect(create_image_from_html_mock.getCall(0).args[1].replace(/\\s/g, \"\")).to.eql('<html><head><style>html{background-color:#ebebeb;color:#000000;font-family:Arial;}strong{color:#000000;font-size:20px;}body{background-color:#ebebeb;color:#000000;margin:1em;display:flex;justify-content:space-evenly;align-items:center;gap:20px;padding:1em;flex-direction:column;margin:1em;padding-top:1em;height:-webkit-fill-available;height:auto;}td{padding:12px15px;}thead{background-color:#b41b22;color:#ffffff;width:100%;font-size:20;font-family:Arial;font-weight:bold;text-align:center;display:table-caption;}tbodytr{border-bottom:1pxsolid#878787;background-color:#f8f8f8;}table{border-collapse:collapse;margin:1em;width:100%;font-size:0.9em;font-family:sans-serif;min-width:400px;box-shadow:0px10px15px-5pxrgba(0,0,0,0.15);color:#000000;}.titolo{display:flex;justify-content:space-around;align-items:center;}</style></head><body><table><thead><trclass=\"titolo\"><th>Answerset</th><th>Mappedvalue:cell</th></tr></thead><tbody><tr><td></td><td>0</td><td>1</td></tr><tr><td>0</td><td>Notdefined</td><td>peppe</td></tr></tbody></table><table><thead><trclass=\"titolo\"><th>Answerset</th><th>Mappedvalue:cell2</th></tr></thead><tbody><tr><td></td><td>0</td><td>1</td></tr><tr><td>0</td><td>cell21</td><td>cell22</td></tr></tbody></table></body></html>'.replace(/\\s/g, \"\"))\n    \n    \n    });\n\n\n    afterEach(() => {\n        //Needed in order to restore the stub and the methods that have been mocked\n        sinon.restore();\n    });\n    \n});"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"39a946ec00dccee5a0731e1828c9ce6502e9b7d0","contentHash":"c17416f44ef7ac05a2d6ccf62b91c0c53cdcc84057935a15dd7120fa6c9d2215"}}